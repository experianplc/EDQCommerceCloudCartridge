"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("assert");
var file_exists_1 = require("@kwsites/file-exists");
var math_sum_1 = require("@kwsites/math-sum");
var filters_1 = require("./util/filters");
var directory_1 = require("./util/directory");
var file_stat_1 = require("./util/file-stat");
function readSync(basePath, includeFilters, options) {
    var rootDir = basePath.replace(/\/$/, '') + '/';
    if (!file_exists_1.exists(rootDir, file_exists_1.FOLDER)) {
        return [];
    }
    var optionBits = toOptionBits(options);
    var allFiles = directory_1.read_dir_sync(rootDir, [], rootDir.length, optionBits);
    return filters_1.apply_filters(basePath, allFiles, includeFilters || [], optionBits);
}
exports.readSync = readSync;
function read(basePath, includeFilters, options, handler) {
    return __awaiter(this, void 0, void 0, function () {
        var args, rootDir, allFiles, filtered, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    args = configureAsyncSearchArgs(basePath, includeFilters, options, handler);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    rootDir = args.basePath.replace(/\/$/, '') + '/';
                    return [4 /*yield*/, directory_1.read_dir(rootDir, rootDir.length, args.options, file_stat_1.fileStat)];
                case 2:
                    allFiles = _a.sent();
                    filtered = filters_1.apply_filters(args.basePath, allFiles, args.includeFilters, args.options);
                    args.callback(null, filtered);
                    return [2 /*return*/, filtered];
                case 3:
                    e_1 = _a.sent();
                    args.callback(e_1, []);
                    throw e_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.read = read;
function configureAsyncSearchArgs() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var basePath = args.shift();
    assert_1.equal(typeof basePath, 'string', 'basePath must be a string');
    for (var i = args.length - 1; i >= 0; i--) {
        if (args[i] === undefined) {
            args.pop();
        }
    }
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : function () { };
    var includeFilters = [];
    var options = 0;
    if (args.length === 1) {
        if (isOptionsConfiguration(args[0])) {
            options = toOptionBits(args[0]);
        }
        else {
            includeFilters = args[0];
        }
    }
    else if (args.length === 2) {
        includeFilters = args.shift();
        options = toOptionBits(args.shift());
    }
    return {
        basePath: basePath,
        callback: callback,
        includeFilters: includeFilters,
        options: options,
    };
}
function isOptionsConfiguration(test) {
    return isNumber(test) || Array.isArray(test) && test.every(isNumber);
}
function toOptionBits(options) {
    return Array.isArray(options) ? math_sum_1.sum(options) : options || 0;
}
function isNumber(test) {
    return typeof test === 'number';
}
/**
 * @deprecated
 */
function isDir(path) {
    console.info("Use of 'readdir.isDir' is deprecated, please replace with '@kwsites/file-exists'");
    return file_exists_1.exists(path, file_exists_1.FOLDER);
}
exports.isDir = isDir;
//# sourceMappingURL=read-dir.js.map